import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControl,
  FormGroup,
  FormControlLabel,
  Checkbox,
  Slider,
  TextField,
  Button,
  Chip,
  Paper,
  Stack
} from '@mui/material';
import { styled } from '@mui/material/styles';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import { FilterOptions } from '../../interfaces/VulnerabilityData';
import * as VulnerabilityService from '../../services/OptimizedVulnerabilityService';
import { severityColorMap, sortSeverities } from '../../utils/severityUtils';

interface VulnerabilityFiltersProps {
  filters: FilterOptions;
  onFilterChange: (filters: FilterOptions) => void;
}

// Create a responsive grid layout using styled components
const FiltersGrid = styled(Box)(({ theme }) => ({
  display: 'grid',
  gridTemplateColumns: 'repeat(1, 1fr)',
  gap: theme.spacing(2),
  [theme.breakpoints.up('md')]: {
    gridTemplateColumns: 'repeat(3, 1fr)',
  },
}));

const FilterItem = styled(Box)(({ theme }) => ({
  width: '100%',
}));

const VulnerabilityFilters: React.FC<VulnerabilityFiltersProps> = ({ 
  filters,
  onFilterChange
}) => {
  // State for available filter options
  const [availableSeverities, setAvailableSeverities] = useState<string[]>([]);
  const [availableStatuses, setAvailableStatuses] = useState<string[]>([]);
  const [availableVendors, setAvailableVendors] = useState<string[]>([]);
  const [availableProducts, setAvailableProducts] = useState<string[]>([]);
  const [availableTypes, setAvailableTypes] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  // State for active filters display
  const [activeFilterCount, setActiveFilterCount] = useState(0);

  // Load available filter options
  useEffect(() => {
    const loadFilterOptions = async () => {
      try {
        setIsLoading(true);
        
        // Load unique values for each filter field
        const severities = await VulnerabilityService.getUniqueFieldValues('severity');
        const statuses = await VulnerabilityService.getUniqueFieldValues('kaiStatus');
        const vendors = await VulnerabilityService.getUniqueFieldValues('vendor');
        const products = await VulnerabilityService.getUniqueFieldValues('product');
        const types = await VulnerabilityService.getUniqueFieldValues('vulnerabilityType');
        
        // Sort severities by priority
        setAvailableSeverities(sortSeverities(severities));
        setAvailableStatuses(statuses);
        setAvailableVendors(vendors.sort());
        setAvailableProducts(products.sort());
        setAvailableTypes(types.sort());
        
        setIsLoading(false);
      } catch (error) {
        console.error('Error loading filter options:', error);
        setIsLoading(false);
      }
    };

    loadFilterOptions();
  }, []);

  // Update filter when selected values change
  const updateFilter = (
    field: keyof FilterOptions,
    value: string[] | { min: number; max: number } | { start: string | null; end: string | null }
  ) => {
    const newFilters = { ...filters, [field]: value };
    onFilterChange(newFilters);
  };

  // Toggle checkbox filters
  const handleCheckboxChange = (field: keyof FilterOptions, value: string) => {
    const currentValues = [...(filters[field] as string[])];
    const index = currentValues.indexOf(value);
    
    if (index === -1) {
      currentValues.push(value);
    } else {
      currentValues.splice(index, 1);
    }
    
    updateFilter(field, currentValues);
  };

  // Handle CVSS range change
  const handleCvssRangeChange = (event: Event, newValue: number | number[]) => {
    if (Array.isArray(newValue)) {
      updateFilter('cvssRange', { min: newValue[0], max: newValue[1] });
    }
  };

  // Handle date range change
  const handleDateChange = (field: 'start' | 'end', value: string) => {
    const dateRange = { ...filters.dateRange };
    dateRange[field] = value || null;
    updateFilter('dateRange', dateRange);
  };

  // Reset all filters
  const handleResetFilters = () => {
    onFilterChange({
      severity: [],
      kaiStatus: [],
      vendor: [],
      product: [],
      vulnerabilityType: [],
      dateRange: { start: null, end: null },
      cvssRange: { min: 0, max: 10 }
    });
  };

  // Calculate active filter count
  useEffect(() => {
    let count = 0;
    
    // Count array filters
    count += filters.severity.length;
    count += filters.kaiStatus.length;
    count += filters.vendor.length;
    count += filters.product.length;
    count += filters.vulnerabilityType.length;
    
    // Count range filters
    if (filters.cvssRange.min > 0 || filters.cvssRange.max < 10) {
      count += 1;
    }
    
    // Count date filters
    if (filters.dateRange.start || filters.dateRange.end) {
      count += 1;
    }
    
    setActiveFilterCount(count);
  }, [filters]);

  return (
    <Paper elevation={1} sx={{ mb: 3, p: 2 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Typography variant="h6">
          Filters {activeFilterCount > 0 && `(${activeFilterCount} active)`}
        </Typography>
        
        <Button 
          variant="outlined" 
          color="secondary" 
          size="small"
          onClick={handleResetFilters}
          disabled={activeFilterCount === 0}
        >
          Reset Filters
        </Button>
      </Box>
      
      <FiltersGrid>
        {/* Severity Filter */}
        <FilterItem>
          <Accordion defaultExpanded>
            <AccordionSummary expandIcon={<ExpandMoreIcon />}>
              <Typography>Severity</Typography>
            </AccordionSummary>
            <AccordionDetails>
              <FormControl component="fieldset">
                <FormGroup>
                  {availableSeverities.map(severity => (
                    <FormControlLabel
                      key={severity}
                      control={
                        <Checkbox
                          checked={filters.severity.includes(severity)}
                          onChange={() => handleCheckboxChange('severity', severity)}
                        />
                      }
                      label={
                        <Chip 
                          size="small" 
                          label={severity} 
                          sx={{ 
                            backgroundColor: severityColorMap[severity] || '#9e9e9e',
                            color: '#fff'
                          }}
                        />
                      }
                    />
                  ))}
                </FormGroup>
              </FormControl>
            </AccordionDetails>
          </Accordion>
        </FilterItem>
        
        {/* Status Filter */}
        <FilterItem>
          <Accordion defaultExpanded>
            <AccordionSummary expandIcon={<ExpandMoreIcon />}>
              <Typography>Status</Typography>
            </AccordionSummary>
            <AccordionDetails>
              <FormControl component="fieldset">
                <FormGroup>
                  {availableStatuses.map(status => (
                    <FormControlLabel
                      key={status}
                      control={
                        <Checkbox
                          checked={filters.kaiStatus.includes(status)}
                          onChange={() => handleCheckboxChange('kaiStatus', status)}
                        />
                      }
                      label={status}
                    />
                  ))}
                </FormGroup>
              </FormControl>
            </AccordionDetails>
          </Accordion>
        </FilterItem>
        
        {/* CVSS Range Filter */}
        <FilterItem>
          <Accordion defaultExpanded>
            <AccordionSummary expandIcon={<ExpandMoreIcon />}>
              <Typography>CVSS Score</Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Box sx={{ px: 2 }}>
                <Slider
                  value={[filters.cvssRange.min, filters.cvssRange.max]}
                  onChange={handleCvssRangeChange}
                  valueLabelDisplay="auto"
                  min={0}
                  max={10}
                  step={0.1}
                  marks={[
                    { value: 0, label: '0' },
                    { value: 10, label: '10' }
                  ]}
                />
                <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                  <Typography variant="caption">Min: {filters.cvssRange.min.toFixed(1)}</Typography>
                  <Typography variant="caption">Max: {filters.cvssRange.max.toFixed(1)}</Typography>
                </Box>
              </Box>
            </AccordionDetails>
          </Accordion>
        </FilterItem>
        
        {/* Date Range Filter */}
        <FilterItem>
          <Accordion>
            <AccordionSummary expandIcon={<ExpandMoreIcon />}>
              <Typography>Publication Date</Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Stack spacing={2}>
                <TextField
                  label="From"
                  type="date"
                  value={filters.dateRange.start || ''}
                  onChange={(e) => handleDateChange('start', e.target.value)}
                  InputLabelProps={{ shrink: true }}
                  size="small"
                  fullWidth
                />
                <TextField
                  label="To"
                  type="date"
                  value={filters.dateRange.end || ''}
                  onChange={(e) => handleDateChange('end', e.target.value)}
                  InputLabelProps={{ shrink: true }}
                  size="small"
                  fullWidth
                />
              </Stack>
            </AccordionDetails>
          </Accordion>
        </FilterItem>
        
        {/* Vendor Filter */}
        <FilterItem>
          <Accordion>
            <AccordionSummary expandIcon={<ExpandMoreIcon />}>
              <Typography>Vendor</Typography>
            </AccordionSummary>
            <AccordionDetails>
              <FormControl component="fieldset">
                <FormGroup>
                  {availableVendors.slice(0, 10).map(vendor => (
                    <FormControlLabel
                      key={vendor}
                      control={
                        <Checkbox
                          checked={filters.vendor.includes(vendor)}
                          onChange={() => handleCheckboxChange('vendor', vendor)}
                        />
                      }
                      label={vendor || 'Unknown'}
                    />
                  ))}
                </FormGroup>
              </FormControl>
            </AccordionDetails>
          </Accordion>
        </FilterItem>
        
        {/* Type Filter */}
        <FilterItem>
          <Accordion>
            <AccordionSummary expandIcon={<ExpandMoreIcon />}>
              <Typography>Vulnerability Type</Typography>
            </AccordionSummary>
            <AccordionDetails>
              <FormControl component="fieldset">
                <FormGroup>
                  {availableTypes.slice(0, 10).map(type => (
                    <FormControlLabel
                      key={type}
                      control={
                        <Checkbox
                          checked={filters.vulnerabilityType.includes(type)}
                          onChange={() => handleCheckboxChange('vulnerabilityType', type)}
                        />
                      }
                      label={type || 'Unknown'}
                    />
                  ))}
                </FormGroup>
              </FormControl>
            </AccordionDetails>
          </Accordion>
        </FilterItem>
      </FiltersGrid>
    </Paper>
  );
};

export default VulnerabilityFilters; 