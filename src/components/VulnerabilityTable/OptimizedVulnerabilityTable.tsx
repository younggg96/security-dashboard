import React, { useState, useEffect, useMemo } from 'react';
import { 
  Table, 
  TableHead, 
  TableBody, 
  TableRow, 
  TableCell, 
  Paper, 
  TableContainer, 
  TablePagination,
  Chip,
  CircularProgress,
  Box,
  Typography,
  TableSortLabel
} from '@mui/material';
import { Vulnerability, FilterOptions } from '../../interfaces/VulnerabilityData';
import * as VulnerabilityService from '../../services/OptimizedVulnerabilityService';
import VulnerabilityFilters from '../Filters/VulnerabilityFilters';
import { severityColorMap } from '../../utils/severityUtils';
import { formatDate } from '../../utils/dateUtils';

interface OptimizedVulnerabilityTableProps {
  filters: FilterOptions;
  onVulnerabilitySelect?: (vulnerability: Vulnerability) => void;
  analysisMode?: 'analysis' | 'aiAnalysis' | 'none';
}

// Table header definition
interface HeadCell {
  id: keyof Vulnerability;
  label: string;
  numeric: boolean;
  sortable: boolean;
}

const headCells: HeadCell[] = [
  { id: 'cveId', label: 'CVE ID', numeric: false, sortable: true },
  { id: 'severity', label: 'Severity', numeric: false, sortable: true },
  { id: 'cvss', label: 'CVSS', numeric: true, sortable: true },
  { id: 'vendor', label: 'Vendor', numeric: false, sortable: true },
  { id: 'product', label: 'Product', numeric: false, sortable: true },
  { id: 'publishedDate', label: 'Published', numeric: false, sortable: true },
  { id: 'kaiStatus', label: 'Status', numeric: false, sortable: true },
  { id: 'vulnerabilityType', label: 'Type', numeric: false, sortable: true }
];

// Sort direction type
type Order = 'asc' | 'desc';

const OptimizedVulnerabilityTable: React.FC<OptimizedVulnerabilityTableProps> = ({ 
  filters, 
  onVulnerabilitySelect,
  analysisMode = 'none'
}) => {
  // State management
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [totalCount, setTotalCount] = useState<number>(0);
  const [page, setPage] = useState<number>(0);
  const [rowsPerPage, setRowsPerPage] = useState<number>(10);
  const [order, setOrder] = useState<Order>('desc');
  const [orderBy, setOrderBy] = useState<keyof Vulnerability>('cvss');
  const [error, setError] = useState<string | null>(null);
  
  // Store instance IDs for each vulnerability to ensure unique keys
  const [instanceIds, setInstanceIds] = useState<Map<Vulnerability, string>>(new Map());

  // Generate unique ID for a vulnerability
  const getUniqueId = (vulnerability: Vulnerability): string => {
    let id = instanceIds.get(vulnerability);
    if (!id) {
      id = VulnerabilityService.getVulnerabilityInstanceId(vulnerability);
      // Update the map for future reference
      setInstanceIds(prevMap => {
        const newMap = new Map(prevMap);
        newMap.set(vulnerability, id!);
        return newMap;
      });
    }
    return id;
  };

  // Load vulnerability data
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Query vulnerabilities based on filter conditions
        let data = await VulnerabilityService.queryVulnerabilities(filters);
        
        // Apply KAI status filtering
        if (analysisMode === 'analysis') {
          data = data.filter(v => v.kaiStatus !== 'invalid - norisk');
        } else if (analysisMode === 'aiAnalysis') {
          data = data.filter(v => v.kaiStatus !== 'ai-invalid-norisk');
        }
        
        // Pre-generate instance IDs for all vulnerabilities
        const idMap = new Map<Vulnerability, string>();
        data.forEach(vuln => {
          idMap.set(vuln, VulnerabilityService.getVulnerabilityInstanceId(vuln));
        });
        setInstanceIds(idMap);
        
        setTotalCount(data.length);
        setVulnerabilities(data);
        setLoading(false);
      } catch (err) {
        console.error('Error fetching vulnerability data:', err);
        setError('Failed to load vulnerability data. Please try again.');
        setLoading(false);
      }
    };

    fetchData();
  }, [filters, analysisMode]);

  // Handle sorting
  const handleRequestSort = (property: keyof Vulnerability) => {
    const isAsc = orderBy === property && order === 'asc';
    setOrder(isAsc ? 'desc' : 'asc');
    setOrderBy(property);
  };

  // Sorting function
  const sortData = (data: Vulnerability[], orderBy: keyof Vulnerability, order: Order) => {
    return [...data].sort((a, b) => {
      const aValue = a[orderBy];
      const bValue = b[orderBy];
      
      // Handle date type
      if (orderBy === 'publishedDate' || orderBy === 'lastModifiedDate') {
        return order === 'asc' 
          ? new Date(aValue as string).getTime() - new Date(bValue as string).getTime()
          : new Date(bValue as string).getTime() - new Date(aValue as string).getTime();
      }
      
      // Handle numeric type
      if (typeof aValue === 'number' && typeof bValue === 'number') {
        return order === 'asc' ? aValue - bValue : bValue - aValue;
      }
      
      // Handle string type
      const aString = String(aValue || '').toLowerCase();
      const bString = String(bValue || '').toLowerCase();
      
      return order === 'asc'
        ? aString.localeCompare(bString)
        : bString.localeCompare(aString);
    });
  };

  // Pagination handling
  const handleChangePage = (event: unknown, newPage: number) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  // Use useMemo to optimize data processing
  const displayData = useMemo(() => {
    // Sort
    const sortedData = sortData(vulnerabilities, orderBy, order);
    
    // Paginate
    return sortedData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);
  }, [vulnerabilities, order, orderBy, page, rowsPerPage]);

  if (error) {
    return (
      <Box 
        sx={{ 
          display: 'flex', 
          justifyContent: 'center', 
          alignItems: 'center', 
          padding: 3 
        }}
      >
        <Typography color="error">{error}</Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ width: '100%' }}>
      <Typography variant="h4" sx={{ mb: 2 }}>
        Vulnerabilities (Optimized)
      </Typography>
      
      {/* Filters component */}
      <VulnerabilityFilters 
        filters={filters}
        onFilterChange={(newFilters: FilterOptions) => {
          // @ts-ignore - This is a prop from parent component
          setFilters(newFilters);
          setPage(0); // Reset to first page on filter change
        }}
      />
      
      {/* Table with vulnerability data */}
      <Paper sx={{ width: '100%', mb: 2 }}>
        <TableContainer>
          <Table sx={{ minWidth: 650 }} aria-label="vulnerability table">
            <TableHead>
              <TableRow>
                <TableCell><strong>CVE ID</strong></TableCell>
                <TableCell><strong>Severity</strong></TableCell>
                <TableCell><strong>CVSS</strong></TableCell>
                <TableCell><strong>Vendor/Product</strong></TableCell>
                <TableCell><strong>Published Date</strong></TableCell>
                <TableCell><strong>Status</strong></TableCell>
                <TableCell><strong>Summary</strong></TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {loading ? (
                <TableRow>
                  <TableCell colSpan={7} align="center" sx={{ py: 3 }}>
                    <CircularProgress size={40} />
                    <Typography sx={{ mt: 2 }}>Loading vulnerability data...</Typography>
                  </TableCell>
                </TableRow>
              ) : vulnerabilities.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={7} align="center">
                    No vulnerabilities found matching the current filters.
                  </TableCell>
                </TableRow>
              ) : (
                displayData.map((vulnerability) => (
                  <TableRow 
                    key={getUniqueId(vulnerability)}
                    sx={{ 
                      '&:last-child td, &:last-child th': { border: 0 },
                      cursor: onVulnerabilitySelect ? 'pointer' : 'default',
                      '&:hover': {
                        backgroundColor: onVulnerabilitySelect ? 'rgba(0, 0, 0, 0.04)' : 'inherit'
                      }
                    }}
                    onClick={() => onVulnerabilitySelect && onVulnerabilitySelect(vulnerability)}
                  >
                    <TableCell component="th" scope="row">
                      {vulnerability.cveId}
                    </TableCell>
                    <TableCell>
                      <Chip 
                        label={vulnerability.severity} 
                        size="small"
                        sx={{
                          backgroundColor: severityColorMap[vulnerability.severity] || '#888',
                          color: '#fff'
                        }}
                      />
                    </TableCell>
                    <TableCell>{vulnerability.cvss?.toFixed(1) || 'N/A'}</TableCell>
                    <TableCell>{`${vulnerability.vendor} / ${vulnerability.product}`}</TableCell>
                    <TableCell>{formatDate(vulnerability.publishedDate)}</TableCell>
                    <TableCell>
                      <Chip 
                        label={vulnerability.kaiStatus || 'Unknown'} 
                        size="small"
                        variant="outlined"
                      />
                    </TableCell>
                    <TableCell sx={{ maxWidth: 300 }}>
                      <Typography noWrap title={vulnerability.summary}>
                        {vulnerability.summary}
                      </Typography>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </TableContainer>
        
        {/* Pagination */}
        <TablePagination
          rowsPerPageOptions={[5, 10, 25, 50]}
          component="div"
          count={totalCount}
          rowsPerPage={rowsPerPage}
          page={page}
          onPageChange={handleChangePage}
          onRowsPerPageChange={handleChangeRowsPerPage}
        />
      </Paper>
    </Box>
  );
};

export default OptimizedVulnerabilityTable; 